


import random
import streamlit as st
import matplotlib.pyplot as plt

def simulate_case_open(prices_and_chances, num_trials=10000):
    winnings = []
    for _ in range(num_trials):
        roll = random.uniform(0, 100)
        cumulative = 0
        for price, chance in prices_and_chances:
            cumulative += chance
            if roll <= cumulative:
                winnings.append(price)
                break
    return winnings

def simulate_upgrade(current_price, target_price, success_chance, num_trials=10000):
    profits = []
    for _ in range(num_trials):
        roll = random.uniform(0, 100)
        if roll <= success_chance:
            profits.append(target_price - current_price)
        else:
            profits.append(-current_price)
    return profits

st.title("üéÆ –°–∏–º—É–ª—è—Ç–æ—Ä –∫–µ–π—Å–æ–≤ –∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤ Topskin")

st.sidebar.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ–π—Å–∞")
case_price = st.sidebar.number_input("–¶–µ–Ω–∞ –∫–µ–π—Å–∞ ($)", min_value=0.01, value=2.5, step=0.01)
num_trials = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π", min_value=100, max_value=100000, value=10000, step=100)

st.sidebar.markdown("### üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–µ–π—Å–µ")
num_items = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–µ–π—Å–µ?", 2, 10, 5)

prices_and_chances = []
remaining_chance = 100.0

for i in range(num_items):
    st.sidebar.markdown(f"#### –ü—Ä–µ–¥–º–µ—Ç {i+1}")
    price = st.sidebar.number_input(f"–¶–µ–Ω–∞ {i+1}-–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ($)", min_value=0.0, value=float(i + 1), key=f"price_{i}")
    if i < num_items - 1:
        chance = st.sidebar.slider(f"–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è (%)", 0.0, remaining_chance, value=remaining_chance / (num_items - i), key=f"chance_{i}")
        remaining_chance -= chance
    else:
        chance = remaining_chance
    prices_and_chances.append((price, chance))

if st.button("üé≤ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–µ–π—Å"):
    results = simulate_case_open(prices_and_chances, num_trials)
    average_win = sum(results) / len(results)
    profit = average_win - case_price

    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–µ–π—Å–∞")
    st.write(f"–°—Ä–µ–¥–Ω—è—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: **${average_win:.2f}**")
    st.write(f"–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: **${profit:.2f}**")

    fig, ax = plt.subplots()
    ax.hist(results, bins=30, color='skyblue', edgecolor='black')
    ax.axvline(case_price, color='red', linestyle='--', label='–¶–µ–Ω–∞ –∫–µ–π—Å–∞')
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–µ–π")
    ax.set_xlabel("–í—ã–∏–≥—Ä—ã—à ($)")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    ax.legend()
    st.pyplot(fig)

st.markdown("---")
st.header("üß© –°–∏–º—É–ª—è—Ç–æ—Ä –∞–ø–≥—Ä–µ–π–¥–∞")

current_price = st.number_input("–¶–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ($)", min_value=0.01, value=2.5)
target_price = st.number_input("–¶–µ–Ω–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ($)", min_value=current_price + 0.01, value=10.0)
success_chance = st.slider("–®–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞ (%)", 1.0, 100.0, 30.0)

if st.button("üéØ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–≥—Ä–µ–π–¥"):
    upgrade_results = simulate_upgrade(current_price, target_price, success_chance, num_trials)
    avg_profit = sum(upgrade_results) / len(upgrade_results)
    success_rate = (sum(1 for r in upgrade_results if r > 0) / len(upgrade_results)) * 100

    st.markdown("### üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–ø–≥—Ä–µ–π–¥–∞")
    st.write(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: **${avg_profit:.2f}**")
    st.write(f"–†–µ–∞–ª—å–Ω—ã–π —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞: **{success_rate:.2f}%**")

    fig2, ax2 = plt.subplots()
    ax2.hist(upgrade_results, bins=30, color='orange', edgecolor='black')
    ax2.axvline(0, color='red', linestyle='--')
    ax2.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∞–ø–≥—Ä–µ–π–¥–∞")
    ax2.set_xlabel("–ü—Ä–æ—Ñ–∏—Ç ($)")
    ax2.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    st.pyplot(fig2)
